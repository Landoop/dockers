#!/usr/bin/env bash

set -e

echo $$ > /var/run/queue.pid > /var/run/ep.pid

# SETUP .BASHRC
if ! grep -iq "KAFKA_CONNECT_REST" /root/.bashrc; then
    echo 'echo -e "\e[33mWelcome to StreamReactor\e[0m"' >> /root/.bashrc
	echo 'echo -e "\e[33mUse connect-cli ps to see deployed connectors\e[0m"' >> /root/.bashrc
    echo 'export KAFKA_CONNECT_REST="http://${CONNECT_REST_ADVERTISED_HOST_NAME}:${CONNECT_REST_PORT}"' \
        >> /root/.bashrc
    echo 'echo -e "\e[35mTo manage the kafka-connect process. Use \e[0m \e[34mkc-cli -h\e[0m"' >> /root/.bashrc
    echo 'export PATH="${PATH}:/opt/lenses/bin/"'  >> /root/.bashrc
fi

# FUNCTION FOR CREATING THE CONNECTOR
function push_config {
    # Wait until local connect's REST API comes up
    # WAIT UNTIL LOCAL CONNECT'S REST API COMES UP
    until /opt/lenses/bin/connect-cli ps >>/dev/null

    do
        echo "Waiting for connect's rest API at ${KAFKA_CONNECT_REST}"
        sleep 10
    done

    echo "Pushing connector config..."
    sleep 5

    if [[ -n "${1}" && -f "${1}" ]]; then
        PROP_FILE="${1}"
    else
        echo "No connector's config was provided"
        exit 1
    fi

    /opt/lenses/bin/connect-cli run "${CONNECTOR_NAME}" < "${PROP_FILE}"
    echo "done."
}

# FUNCTION FOR PROCESSING AND WRITING IDIVIDUAL VARIABLES TO CONNECTOR.PROPERTIES
function process_variable {
    # SET VARIABLES
    local var="${1}"
    local prefix="${2}"
    local config_file="${3}"

    # REMOVE PREFIX FROM VAR NAME
    conf="${var#${prefix}}"

    # CONVERT VAR NAME TO LOWERCASE
    conf="$(echo ${conf,,} | tr _ .)"

    # OPTION: KEY=VAL
    opt="${conf}=${!var}"

    # WRITE OPTION TO CONFIG FILE
    printf '%s\n' "${opt}" >> "${config_file}"
}

rm -f "/opt/lenses/connector.properties"

# PARSE CONNECTOR OPTIONS FROM ENV
printenv \
    | grep -E "^CONNECTOR_" \
    | sed -e 's/=.*//' \
    | while read var
do
    process_variable "${var}" "CONNECTOR_" "/opt/lenses/connector.properties"
done

# CHECK IF PLUGINS PATH IS SET, SET TO /CONNECTORS OTHERWISE
if [[ -z "${CONNECT_PLUGIN_PATH}" ]]; then
    export CONNECT_PLUGIN_PATH="/opt/lenses/lib"
fi

# INSTALL CONNECTOR TO CONNECT_PLUGIN_PATH IF A NEW PATH WAS PROVIDED
if ! ls "${CONNECT_PLUGIN_PATH}" 2>/dev/null | grep -iq "${ARCHIVE%%".tar.gz"*}.jar"; then
    if [[ ! -e "${CONNECT_PLUGIN_PATH}" ]]; then
        mkdir -p "${CONNECT_PLUGIN_PATH}"
    fi

    ln -sf /opt/lenses/lib/"${ARCHIVE%%".tar.gz"*}.jar" "${CONNECT_PLUGIN_PATH}/"
fi

# REQUIRED BY CONNECT-CLI TO CONNECT WITH KAFKA-CONNECT
export KAFKA_CONNECT_REST="http://${CONNECT_REST_ADVERTISED_HOST_NAME}:${CONNECT_REST_PORT}"

# CONFIGURE THE WORKER AND CONNECTOR PROP FILES
/etc/confluent/docker/configure

if [ ! -f /etc/kafka-connect/kafka-connect.properties ]; then
    echo "Failed to find /etc/kafka-connect/kafka-connect.properties"
    exit 1
fi

push_config "/opt/lenses/connector.properties" &
echo $! > /var/run/queue.pid > /var/run/pc.pid

# SETUP CLASSPATH
export CLASSPATH="${CLASSPATH}:/opt/lensesio/kafka-connect/plugins/*.jar"
export CLASSPATH="${CLASSPATH}:/opt/calcite/*.jar"
echo "CLASSPATH=${CLASSPATH}" > "/opt/lenses/.env"

# EXPORT CLASSPATH TO ENV AND SETUP PLUGINS
if ! grep -iq '\/opt\/lenses\/\.env' /etc/bash.bashrc; then
    echo "source /opt/lenses/.env" >> /etc/bash.bashrc

    # CREATE SYMLINKS OF INSTALLED PLUGINS
    ln -sf /opt/lenses/kafka-connect/plugins/* /etc/kafka-connect/jars/
    ln -sf /opt/calcite/* /etc/kafka-connect/jars/
fi

# START KAFKA CONNECT USING DUMP-INIT TO HANDLE SIGNALS
echo "Starting Connect worker"
/opt/lenses/bin/kc-cli -i

# EOF
